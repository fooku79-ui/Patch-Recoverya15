name: Patch Recovery

on:
  workflow_dispatch:
    inputs:
      recovery_url:
        description: "Direct URL to recovery image (.img/.img.gz/.img.xz/.img.zst/.img.lz4)"
        required: true
        type: string
      output_name:
        description: "Output filename"
        required: false
        default: "recovery_patched.img"
        type: string

jobs:
  patch:
    runs-on: ubuntu-22.04
    timeout-minutes: 25

    env:
      WORK_DIR: ${{ github.workspace }}/work
      OUT_DIR: ${{ github.workspace }}/out
      RECOVERY_IMG: ${{ github.workspace }}/recovery.img

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git curl file xz-utils zstd gzip lz4 cpio unzip

      - name: Fetch Android Image Kitchen
        run: |
          set -euxo pipefail
          git clone --depth=1 https://github.com/osm0sis/Android-Image-Kitchen AIK
          echo "Using AIK at $PWD/AIK"

      - name: Download recovery image
        run: |
          set -euxo pipefail
          mkdir -p "$WORK_DIR" "$OUT_DIR"
          URL="${{ inputs.recovery_url }}"
          curl -fL "$URL" -o input.bin
          case "$URL" in
            *.img)       mv input.bin "$RECOVERY_IMG" ;;
            *.img.gz)    gunzip -c input.bin > "$RECOVERY_IMG" ;;
            *.img.xz)    xz -dc input.bin > "$RECOVERY_IMG" ;;
            *.img.zst)   zstd -dc input.bin > "$RECOVERY_IMG" ;;
            *.img.lz4)   lz4 -dq input.bin "$RECOVERY_IMG" ;;
            *)           file input.bin; mv input.bin "$RECOVERY_IMG" ;;
          esac
          ls -lh "$RECOVERY_IMG"

      - name: Sanity check image
        run: |
          set -euxo pipefail
          file "$RECOVERY_IMG" || true
          if ! strings "$RECOVERY_IMG" | grep -qi -e ANDROID -e SEANDROID -e "ANDROID!"; then
            echo "Not seeing Android boot image magic; aborting."
            exit 1
          fi
          echo "Looks like an Android recovery image."

      - name: Unpack
        run: |
          set -euxo pipefail
          cp "$RECOVERY_IMG" "$WORK_DIR/recovery.img"
          bash AIK/unpackimg.sh "$WORK_DIR/recovery.img"
          ls -al "$WORK_DIR" || true

      - name: Repack
        run: |
          set -euxo pipefail
          pushd "$WORK_DIR" >/dev/null
          bash ../AIK/repackimg.sh
          popd >/dev/null
          test -f "$WORK_DIR/image-new.img"
          mv "$WORK_DIR/image-new.img" "$OUT_DIR/${{ inputs.output_name }}"
          sha256sum "$OUT_DIR/${{ inputs.output_name }}" | tee "$OUT_DIR/${{ inputs.output_name }}.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: recovery-patched
          path: ${{ env.OUT_DIR }}/
          if-no-files-found: error
